# Generated by Django 5.2.3 on 2025-07-02 10:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the property', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly name', max_length=220, unique=True)),
                ('property_type', models.CharField(choices=[('hotel', 'Hotel'), ('airbnb', 'Airbnb'), ('resort', 'Resort'), ('hostel', 'Hostel'), ('guesthouse', 'Guest House'), ('apartment', 'Apartment'), ('villa', 'Villa'), ('cottage', 'Cottage'), ('motel', 'Motel'), ('boutique', 'Boutique Hotel'), ('lodge', 'Lodge'), ('inn', 'Inn')], default='hotel', help_text='Type of accommodation', max_length=20)),
                ('email', models.EmailField(help_text='Primary contact email', max_length=254)),
                ('phone', models.CharField(help_text='Contact phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in format: '+254712345678' or '0712345678'", regex='^\\+?1?\\d{9,15}$')])),
                ('website', models.URLField(blank=True, help_text='Hotel website URL')),
                ('address', models.TextField(help_text='Full address of the property')),
                ('city', models.CharField(db_index=True, max_length=100)),
                ('state_province', models.CharField(blank=True, help_text='State or Province', max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(db_index=True, max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Latitude coordinate', max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Longitude coordinate', max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('description', models.TextField(blank=True, help_text='Detailed description of the property')),
                ('short_description', models.CharField(blank=True, help_text='Brief description for listings', max_length=300)),
                ('logo', models.ImageField(blank=True, help_text='Property logo', null=True, upload_to='hotel_logos/')),
                ('cover_image', models.ImageField(blank=True, help_text='Main cover image', null=True, upload_to='hotel_covers/')),
                ('star_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Official star rating', null=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average customer rating (0.00-5.00)', max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('total_reviews', models.PositiveIntegerField(default=0, help_text='Total number of reviews')),
                ('amenities', models.TextField(blank=True, help_text='List of amenities (comma-separated): WiFi, Pool, Gym, Spa, etc.')),
                ('languages_spoken', models.CharField(blank=True, help_text='Languages spoken at reception (comma-separated)', max_length=200)),
                ('check_in_time', models.TimeField(blank=True, help_text='Standard check-in time', null=True)),
                ('check_out_time', models.TimeField(blank=True, help_text='Standard check-out time', null=True)),
                ('cancellation_policy', models.TextField(blank=True, help_text='Property cancellation policy')),
                ('is_active', models.BooleanField(default=True, help_text='Is the property currently active?')),
                ('is_verified', models.BooleanField(default=False, help_text='Has the property been verified?')),
                ('is_featured', models.BooleanField(default=False, help_text='Is this a featured property?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Hotel/Property',
                'verbose_name_plural': 'Hotels/Properties',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['city', 'country'], name='users_hotel_city_2834e6_idx'), models.Index(fields=['property_type', 'is_active'], name='users_hotel_propert_4b54ca_idx'), models.Index(fields=['rating'], name='users_hotel_rating_0ff63e_idx')],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('super_admin', 'Super Administrator'), ('hotel_admin', 'Hotel Administrator'), ('hotel_staff', 'Hotel Staff'), ('customer', 'Customer'), ('guest', 'Guest User')], default='customer', help_text='User role in the system', max_length=20)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in format: '+254712345678'", regex='^\\+?1?\\d{9,15}$')])),
                ('address', models.TextField(blank=True, help_text='Full address', null=True)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country', max_length=100)),
                ('postal_code', models.CharField(blank=True, help_text='Postal/ZIP code', max_length=20)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=1)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='profile_pictures/')),
                ('bio', models.TextField(blank=True, help_text='Short bio', max_length=500)),
                ('preferred_language', models.CharField(default='en', help_text='Preferred language code', max_length=10)),
                ('preferred_currency', models.CharField(default='USD', help_text='Preferred currency code', max_length=3)),
                ('receive_notifications', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('receive_marketing', models.BooleanField(default=False, help_text='Receive marketing emails')),
                ('is_verified', models.BooleanField(default=False, help_text='Email verification status')),
                ('phone_verified', models.BooleanField(default=False, help_text='Phone verification status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('hotel', models.ForeignKey(blank=True, help_text='Associated hotel (for staff members)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staff_members', to='users.hotel')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True)),
                ('token_type', models.CharField(choices=[('auth', 'Authentication Token'), ('reset', 'Password Reset Token'), ('verify', 'Email Verification Token'), ('phone', 'Phone Verification Token'), ('api', 'API Access Token')], default='auth', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Token',
                'verbose_name_plural': 'User Tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['role', 'is_active'], name='users_custo_role_e4c2f2_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['hotel', 'role'], name='users_custo_hotel_i_017725_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='users_custo_email_c80f75_idx'),
        ),
        migrations.AddIndex(
            model_name='usertoken',
            index=models.Index(fields=['token', 'is_active'], name='users_usert_token_51ed17_idx'),
        ),
        migrations.AddIndex(
            model_name='usertoken',
            index=models.Index(fields=['user', 'token_type'], name='users_usert_user_id_456b80_idx'),
        ),
    ]
